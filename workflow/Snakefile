import pandas as pd
import os
import numpy as np
from functools import reduce

pheno_nms= ['miscarriage']


sample_nms= ['moms', 'fets', 'dads']

CHR_nms= ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22', 'X']
autosomal_CHR= ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22']

include: "scripts/effect_origin/Snakefile"
include: "scripts/HESS/Snakefile"

rule all:
	'Collect the main outputs of the workflow.'
	input:
		expand('/mnt/work2/pol/other_pheno/miscarriage/results/delivery/{sample}/{pheno}.allchr.txt.gz', sample= sample_nms, pheno= pheno_nms),
		expand('/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/h2/{sample}/{pheno}.log', sample= sample_nms, pheno= pheno_nms),
		expand('/mnt/work2/pol/other_pheno/miscarriage/delivery/effect_origin/delivery/lh/{pheno}.txt', pheno= pheno_nms),
		expand('/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/cts_h2/{cts}/{sample}-{pheno}.cell_type_results.txt', pheno= pheno_nms, cts= ['gene_expr', 'chromatin'], sample= sample_nms),
#		expand('/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/part_h2/{sample}-{pheno}.results', pheno= pheno_nms, sample= sample_nms),
		'/mnt/work2/pol/other_pheno/miscarriage/HESS/checks/h2_estimated.txt'
		

def selectUnrelated(input_kin, df, x):
        kin= pd.read_csv(input_kin, header= 0, sep= '\t')
        kin= kin.loc[kin.Kinship > 0.125, :]
        kin= kin.loc[kin.ID1.isin(x.values)]
        kin= kin.loc[kin.ID2.isin(x.values)]
        kin= kin.loc[:, ['ID1','ID2','Kinship']]
        kin_temp= kin.copy()
        kin_temp.columns= ['ID2', 'ID1', 'Kinship']
        kin_temp= kin_temp.append(kin)
        kin_temp['n']= kin_temp.groupby('ID1')['ID1'].transform('count')
        kin_temp['nn']= kin_temp.groupby('ID2')['ID2'].transform('count')
        kin_temp.sort_values(by=['n', 'nn'], inplace= True)
        to_keep= list()
        for i in range(0, len(kin_temp.index)):
                if kin_temp.iloc[i, 0] in kin_temp.iloc[0:i, 1].values:
                        kin_temp.iloc[i, 1]= "X"
                else:
                        to_keep.append(kin_temp.iloc[i, 0])
        to_remove= [i for i in kin_temp.ID1 if i not in to_keep]
        to_remove= list(set(to_remove))
        remove= pd.DataFrame({'FID': to_remove})
        remove['IID']= remove.FID
        return remove


rule phenofile:
        'Pheno file for miscarriage.'
        input:
                '/mnt/work/pol/MOBAGENETICS/rotterdam2_mfr.csv',
                '/mnt/work/pol/MOBAGENETICS/PREG_ID_to_IID.txt',
                '/mnt/archive/MOBAGENETICS/genotypes-base/aux/flaglist-merged/mobagen-flaglist-n99259.txt',
                '/mnt/work/pol/MOBAGENETICS/pca_out.txt'
	output:
		temp('/mnt/work2/pol/other_pheno/miscarriage/pheno/temp/temp_pheno_moms.txt'),
		temp('/mnt/work2/pol/other_pheno/miscarriage/pheno/temp/temp_pheno_fets.txt'),
		temp('/mnt/work2/pol/other_pheno/miscarriage/pheno/temp/temp_pheno_dads.txt')
	script:
		'scripts/pheno_file.R'

rule concat_phenos_PCA:
	'Concat pheno files, and add PCA.'
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/pca/mobagen-total/mobagen-total-proj-pc',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/temp/temp_pheno_{sample}.txt',
		'/mnt/archive/MOBAGENETICS/genotypes-base/aux/pedigree/mobagen-ethnic-core-samples.kin0'
	output:
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_pheno_bin.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_covars.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_ids.txt',
	run:
		d= pd.read_csv(input[1], header= 0, sep= '\t')
#		remove= selectUnrelated(input[2], d, d.IID)
#		d= d.loc[~d.IID.isin(remove), :]
		pca= pd.read_csv(input[0], header= 0, sep= '\t')
		d= pd.merge(d, pca, how= 'inner', on= 'IID')
		d.fillna('NA', inplace= True)
		for elem in set(d['cohort']):
			d[str(elem)]= d['cohort'] == elem
		d[['HARVEST', 'NORMENT', 'ROTTERDAM1', 'ROTTERDAM2']] *= 1
		d['FID']= d.IID
		d.to_csv(output[0], sep= '\t', header= True, index= False, columns= ['FID', 'IID', 'miscarriage'])
		d.to_csv(output[1], sep= '\t', header= True, index= False, columns= ['FID', 'IID', 'PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10', 'cohort'])#'HARVEST', 'NORMENT', 'ROTTERDAM1', 'ROTTERDAM2'])
		d.to_csv(output[2], sep= '\t', header= False, index= False, columns= ['FID', 'IID'])


rule plink2_filter_mac:
	''
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/subset/grm-high-quality-pruned/grm-high-quality-pruned.bed',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_ids.txt'
	output:
		'/mnt/work2/pol/other_pheno/miscarriage/vars/{sample}_filter.snplist'
	params:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/subset/grm-high-quality-pruned/grm-high-quality-pruned',
		'/mnt/work2/pol/other_pheno/miscarriage/vars/{sample}_filter'
	shell:
		'''
		/home/pol.sole.navais/soft/plink2 \
		--bfile {params[0]} \
		--mac 100 \
		--write-snplist \
		--keep {input[1]} \
		--out {params[1]}
		'''

rule bgen_samples:
	'List of bGEN samples.'
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/bgen/{CHR}.bgen'
	output:
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/bgen_samples/{CHR}_samples.txt'
	shell:
		'/home/pol.sole.navais/soft/qctool_v2.0.8/qctool -g {input[0]} -os {output[0]}'

rule REGENIE_step1:
	'Whole genome regression model is fit to the traits.'
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/subset/grm-high-quality-pruned/grm-high-quality-pruned.bed',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_pheno_bin.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_covars.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_ids.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/vars/{sample}_filter.snplist'
	output:
		temp('/mnt/work2/pol/other_pheno/miscarriage/regenie/step1/{sample}_1.loco.gz'),
		temp('/mnt/work2/pol/other_pheno/miscarriage/regenie/step1/{sample}_pred.list')
	params:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/subset/grm-high-quality-pruned/grm-high-quality-pruned',
		'/mnt/work2/pol/other_pheno/miscarriage/regenie/step1/{sample}',
		'/mnt/work2/pol/other_pheno/miscarriage/regenie/step1/{sample}_temp'
	threads: 25
	shell:
		'''
		/home/pol.sole.navais/soft/regenie_v2.2.4.gz_x86_64_Linux \
		--step 1 \
		--threads {threads} \
		--gz \
		--bed {params[0]} \
		--covarFile {input[2]} \
		--phenoFile {input[1]} \
		--keep {input[3]} \
		--extract {input[4]} \
		--bsize 1000 \
		--bt --lowmem \
		--lowmem-prefix {params[2]} \
		--catCovarList cohort \
		--out {params[1]}
		'''

rule REGENIE_step2:
	'Whole genome regression model is fit to the traits.'
	input:
		'/mnt/archive/MOBAGENETICS/genotypes-base/imputed/all/bgen/{CHR}.bgen',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_pheno_bin.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_covars.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/{sample}_ids.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/regenie/step1/{sample}_pred.list',
		'/mnt/work2/pol/other_pheno/miscarriage/pheno/bgen_samples/{CHR}_samples.txt',
		'/mnt/work2/pol/other_pheno/miscarriage/regenie/step1/{sample}_1.loco.gz'
	output:
		temp(expand('/mnt/work2/pol/other_pheno/miscarriage/regenie/step2/temp/{{sample}}/{{CHR}}_{pheno}.regenie', pheno=pheno_nms))
	params:
		'/mnt/work2/pol/other_pheno/miscarriage/regenie/step2/temp/{sample}/{CHR}'
	threads: 4
	shell:
		'''
		/home/pol.sole.navais/soft/regenie_v2.2.4.gz_x86_64_Linux \
		--step 2 \
		--bgen {input[0]} \
		--covarFile {input[2]} \
		--keep {input[3]} \
		--phenoFile {input[1]} \
		--bsize 400 \
		--bt \
		--firth --approx \
		--minINFO 0.6 \
		--threads {threads} \
		--sample {input[5]} \
		--pred {input[4]} \
		--out {params[0]} \
		--catCovarList cohort \
		--verbose
		'''

rule concat_results:
	''
	input:
		expand('/mnt/work2/pol/other_pheno/miscarriage/regenie/step2/temp/{{sample}}/{CHR}_{{pheno}}.regenie', CHR= CHR_nms)
	output:
		temp('/mnt/work2/pol/other_pheno/miscarriage/regenie/step2/temp/results/{sample}/{pheno}/results.allchr.txt')
	shell:
		'''
		head -1 {input[0]} > {output[0]}
		tail -n +2 -q {input} >> {output[0]}
		'''

rule gzip_results:
	''
	input:
		'/mnt/work2/pol/other_pheno/miscarriage/regenie/step2/temp/results/{sample}/{pheno}/results.allchr.txt'
	output:
		'/mnt/work2/pol/other_pheno/miscarriage/results/delivery/{sample}/{pheno}.allchr.txt.gz'
	shell:
		'gzip -c {input[0]} > {output[0]}'

rule preformat_results_LDscore:
	''
	input:
		'/mnt/work2/pol/other_pheno/miscarriage/results/delivery/{sample}/{pheno}.allchr.txt.gz',
		'/home/pol.sole.navais/soft/ldsc/eur_w_ld_chr/w_hm3.snplist'
	output:
		'/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/{sample}/{pheno}.allchr.txt'
	run:
		d= pd.read_csv(input[0], sep= ' ', header= 0, compression= 'gzip', usecols= ['ID', 'CHROM', 'GENPOS', 'N', 'ALLELE0', 'ALLELE1', 'BETA', 'SE', 'LOG10P'])[['ID', 'CHROM', 'GENPOS', 'N', 'ALLELE0', 'ALLELE1', 'BETA', 'SE', 'LOG10P']]
		print(d.shape)
                d.columns= ['SNP', 'CHR', 'POS', 'N', 'A1', 'A2', 'BETA', 'SE', 'pvalue']
		df= pd.read_csv(input[1], sep= '\t', header= 0)
		print(df.shape)
		d= d.loc[d.SNP.isin(df.SNP.values), :]
		print(d.shape)
                d.dropna(axis= 0, inplace= True)
                d['CHR']= d.CHR.apply(str)
                d= d.loc[~((d.CHR==6) & (d.POS >28477797) & (d.POS< 33448354)), :]
                d.drop_duplicates(['CHR', 'POS', 'A1', 'A2'], keep= 'first', inplace= True)
		d['pvalue']= 10**-d.pvalue
                d.to_csv(output[0], sep= '\t', header= True, index= False, columns= ['SNP', 'CHR', 'POS', 'N', 'A2', 'A1', 'BETA', 'SE', 'pvalue'])

rule munge_LDSC_meta:
        'Format sumstats according to LDSC.'
        input:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/{sample}/{pheno}.allchr.txt'
        output:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/sumstats/{sample}/{pheno}.txt.sumstats.gz'
        params:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/sumstats/{sample}/{pheno}.txt'
        conda:
                '/home/pol.sole.navais/soft/ldsc/environment.yml'
        shell:
                """
                set +eu
                source /home/pol.sole.navais/miniconda3/etc/profile.d/conda.sh
                conda activate ldsc
                python2 /home/pol.sole.navais/soft/ldsc/munge_sumstats.py \
                --merge-alleles /home/pol.sole.navais/soft/ldsc/eur_w_ld_chr/w_hm3.snplist \
                --out {params[0]} \
                --sumstats {input[0]} \
                --chunksize 500000
                conda deactivate
                set -eu
                """

rule heritability_individual_cohorts:
        ''
        input:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/sumstats/{sample}/{pheno}.txt.sumstats.gz'
        output:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/h2/{sample}/{pheno}.log'
        params:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/h2/{sample}/{pheno}'
        shell:
                """
                set +eu
                source /home/pol.sole.navais/miniconda3/etc/profile.d/conda.sh
                conda activate ldsc
                python2 /home/pol.sole.navais/soft/ldsc/ldsc.py \
                --h2 {input[0]} \
                --ref-ld-chr /home/pol.sole.navais/soft/ldsc/eur_w_ld_chr/ \
                --w-ld-chr /home/pol.sole.navais/soft/ldsc/eur_w_ld_chr/ \
                --out {params[0]}
                conda deactivate
                set -eu
                """

rule partitioned_heritability:
        'LDSC partitioned heritability.'
        input:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/sumstats/{sample}/{pheno}.txt.sumstats.gz'
        output:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/part_h2/{sample}-{pheno}.log',
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/part_h2/{sample}-{pheno}.results'
        params:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/part_h2/{sample}-{pheno}'
        shell:
                '''
                set +eu
                source /home/pol.sole.navais/miniconda3/etc/profile.d/conda.sh
                conda activate ldsc
                python2 /home/pol.sole.navais/soft/ldsc/ldsc.py \
                --h2 {input[0]}\
                --ref-ld-chr /home/pol.sole.navais/soft/ldsc/baseline/baselineLD. \
                --w-ld-chr /home/pol.sole.navais/soft/ldsc/weights_hm3_no_hla/weights.\
                --overlap-annot\
                --frqfile-chr /home/pol.sole.navais/soft/ldsc/1000G_Phase3_frq/1000G.EUR.QC.\
                --out {params[0]}
                conda deactivate
                set -eu
                '''

rule partitioned_heritability_cell_type:
        'LDSC partitioned heritability by cell type.'
        input:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/aux/tmp/sumstats/{sample}/{pheno}.txt.sumstats.gz'
        output:
	        '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/cts_h2/{cts}/{sample}-{pheno}.log',
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/cts_h2/{cts}/{sample}-{pheno}.cell_type_results.txt'
	params:
                '/mnt/work2/pol/other_pheno/miscarriage/results/ldsc/cts_h2/{cts}/{sample}-{pheno}',
                '/mnt/work2/pol/ldsc/cts/Multi_tissue_{cts}.ldcts'
	shell:
		'''
		set +eu
		source /home/pol.sole.navais/miniconda3/etc/profile.d/conda.sh
		conda activate ldsc
		cd /mnt/work2/pol/ldsc/cts/
		python2 /home/pol.sole.navais/soft/ldsc/ldsc.py \
		--h2-cts {input[0]}\
		--ref-ld-chr-cts {params[1]} \
		--w-ld-chr /home/pol.sole.navais/soft/ldsc/weights_hm3_no_hla/weights.\
		--ref-ld-chr /home/pol.sole.navais/soft/ldsc/baseline/baselineLD.\
		--out {params[0]}
		conda deactivate
		set -eu
		'''

